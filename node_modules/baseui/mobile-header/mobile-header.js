"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MobileHeader = MobileHeader;
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _overrides = require("../helpers/overrides");

var _button = require("../button");

var _styledComponents = require("./styled-components");

var _constants = require("./constants");

var _index = require("../styles/index");

var _excluded = ["children", "type"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var renderButtonContent = function renderButtonContent(content) {
  if (typeof content === 'string') {
    return content;
  }

  var Icon = content;
  return /*#__PURE__*/React.createElement(Icon, {
    size: 32
  });
};

var DefaultHeaderButton = function DefaultHeaderButton(_ref) {
  var children = _ref.children,
      type = _ref.type,
      restProps = _objectWithoutProperties(_ref, _excluded);

  var _useStyletron = (0, _index.useStyletron)(),
      _useStyletron2 = _slicedToArray(_useStyletron, 2),
      theme = _useStyletron2[1];

  var isFloating = type === _constants.TYPE.floating;
  var hasTextContent = typeof children === 'string';
  var shouldHaveTrailingMargin = isFloating || !hasTextContent;
  var trailingMargin = theme.direction === 'rtl' ? {
    marginLeft: theme.sizing.scale300
  } : {
    marginRight: theme.sizing.scale300
  };

  var style = _objectSpread(_objectSpread(_objectSpread({}, !hasTextContent ? {
    height: '48px',
    width: '48px',
    paddingTop: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    paddingRight: 0
  } : {}), shouldHaveTrailingMargin ? trailingMargin : {}), isFloating ? {
    backgroundColor: theme.colors.backgroundPrimary
  } : {});

  return /*#__PURE__*/React.createElement(_button.Button, _extends({
    kind: _button.KIND.tertiary,
    shape: _button.SHAPE.pill,
    overrides: {
      BaseButton: {
        style: style
      }
    }
  }, restProps), children);
};

function MobileHeader(_ref2) {
  var _ref2$overrides = _ref2.overrides,
      overrides = _ref2$overrides === void 0 ? {} : _ref2$overrides,
      title = _ref2.title,
      navButton = _ref2.navButton,
      _ref2$actionButtons = _ref2.actionButtons,
      actionButtons = _ref2$actionButtons === void 0 ? [] : _ref2$actionButtons,
      _ref2$type = _ref2.type,
      type = _ref2$type === void 0 ? _constants.TYPE.fixed : _ref2$type,
      _ref2$expanded = _ref2.expanded,
      expanded = _ref2$expanded === void 0 ? false : _ref2$expanded;

  var _getOverrides = (0, _overrides.getOverrides)(overrides.Root, _styledComponents.StyledRoot),
      _getOverrides2 = _slicedToArray(_getOverrides, 2),
      Root = _getOverrides2[0],
      rootProps = _getOverrides2[1];

  var _getOverrides3 = (0, _overrides.getOverrides)(overrides.Title, _styledComponents.StyledTitle),
      _getOverrides4 = _slicedToArray(_getOverrides3, 2),
      Title = _getOverrides4[0],
      titleProps = _getOverrides4[1];

  var _getOverrides5 = (0, _overrides.getOverrides)(overrides.NavContainer, _styledComponents.StyledNavContainer),
      _getOverrides6 = _slicedToArray(_getOverrides5, 2),
      NavContainer = _getOverrides6[0],
      navContainerProps = _getOverrides6[1];

  var _getOverrides7 = (0, _overrides.getOverrides)(overrides.HeaderButton, DefaultHeaderButton),
      _getOverrides8 = _slicedToArray(_getOverrides7, 2),
      HeaderButton = _getOverrides8[0],
      iconButtonProps = _getOverrides8[1];

  var _getOverrides9 = (0, _overrides.getOverrides)(overrides.ActionButtonsContainer, _styledComponents.StyledActionButtonsContainer),
      _getOverrides10 = _slicedToArray(_getOverrides9, 2),
      ActionButtonsContainer = _getOverrides10[0],
      actionButtonsContainerProps = _getOverrides10[1];

  if (actionButtons.length > 2 && process.env.NODE_ENV !== "production") {
    console.warn("MobileHeader can only render two additional buttons. Received ".concat(actionButtons.length));
  }

  return /*#__PURE__*/React.createElement(Root, _extends({}, rootProps, {
    $type: type,
    $expanded: expanded
  }), /*#__PURE__*/React.createElement(NavContainer, _extends({
    $type: type,
    $hasTextContent: navButton && !Boolean(navButton.renderIcon)
  }, navContainerProps), navButton && /*#__PURE__*/React.createElement(HeaderButton, _extends({
    onClick: navButton.onClick,
    type: type,
    "aria-label": navButton.label
  }, iconButtonProps), renderButtonContent(navButton.renderIcon || navButton.label))), type === _constants.TYPE.fixed && /*#__PURE__*/React.createElement(Title, _extends({
    $type: type,
    $expanded: expanded
  }, titleProps), title), actionButtons.length > 0 && /*#__PURE__*/React.createElement(ActionButtonsContainer, actionButtonsContainerProps, actionButtons.map(function (button, idx) {
    var renderIcon = button.renderIcon,
        onClick = button.onClick,
        label = button.label;
    return /*#__PURE__*/React.createElement(HeaderButton, _extends({
      onClick: onClick,
      "aria-label": label,
      type: type
    }, iconButtonProps, {
      key: idx
    }), renderButtonContent(renderIcon || label));
  })));
}

var _default = MobileHeader;
exports.default = _default;