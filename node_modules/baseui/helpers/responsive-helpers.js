"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMinimumPageMargins = exports.getMediaQueryPageMargins = exports.getMediaQuery = exports.getMediaQueries = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/

/**
 * Helper function that generates media queries based on breakpoint, e.g.
 * getMediaQuery(720) => '@media screen and (min-width: 720px)'
 */
var getMediaQuery = function getMediaQuery(breakpoint) {
  return "@media screen and (min-width: ".concat(breakpoint, "px)");
};

exports.getMediaQuery = getMediaQuery;

var getMediaQueries = function getMediaQueries(breakpoints) {
  return Object.keys(breakpoints) // @ts-ignore
  .map(function (key) {
    return breakpoints[key];
  }).sort(function (a, b) {
    return a - b;
  }).map(getMediaQuery);
};

exports.getMediaQueries = getMediaQueries;

var getMinimumPageMargins = function getMinimumPageMargins(margins) {
  var margin = Array.isArray(margins) ? margins[0] : margins;
  return {
    paddingInlineStart: "".concat(margin, "px"),
    paddingInlineEnd: "".concat(margin, "px")
  };
};

exports.getMinimumPageMargins = getMinimumPageMargins;

var getMediaQueryPageMargins = function getMediaQueryPageMargins(theme) {
  var result = {};
  var mediaQueries = getMediaQueries(theme.breakpoints);

  var _iterator = _createForOfIteratorHelper(mediaQueries.entries()),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _theme$grid$margins$i;

      var _step$value = _slicedToArray(_step.value, 2),
          index = _step$value[0],
          query = _step$value[1];

      // There is no guarantee grid.margins will have enough margins to satisfy
      // each breakpoint.
      var margin = Array.isArray(theme.grid.margins) ? (_theme$grid$margins$i = theme.grid.margins[index]) !== null && _theme$grid$margins$i !== void 0 ? _theme$grid$margins$i : theme.grid.margins.at(-1) : theme.grid.margins;
      result[query] = {
        paddingInlineStart: "".concat(margin, "px"),
        paddingInlineEnd: "".concat(margin, "px")
      };
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return result;
};

exports.getMediaQueryPageMargins = getMediaQueryPageMargins;