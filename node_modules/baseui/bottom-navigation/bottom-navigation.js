"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _selector = require("./selector");

var _panel = require("./panel");

var _styledComponents = require("./styled-components");

var _overrides = require("../helpers/overrides");

var _list = require("../list");

var _mobileHeader = require("../mobile-header");

var _icon = require("../icon");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var MAX_SELECTORS = 5;

var BottomNavigation = function BottomNavigation(_ref) {
  var _ref$activeKey = _ref.activeKey,
      activeKey = _ref$activeKey === void 0 ? 0 : _ref$activeKey,
      onChange = _ref.onChange,
      children = _ref.children,
      _ref$overrides = _ref.overrides,
      overrides = _ref$overrides === void 0 ? {} : _ref$overrides;

  var _getOverrides = (0, _overrides.getOverrides)(overrides.Root, _styledComponents.StyledRoot),
      _getOverrides2 = _slicedToArray(_getOverrides, 2),
      Root = _getOverrides2[0],
      RootProps = _getOverrides2[1];

  var _getOverrides3 = (0, _overrides.getOverrides)(overrides.SelectorList, _styledComponents.StyledSelectorList),
      _getOverrides4 = _slicedToArray(_getOverrides3, 2),
      SelectorList = _getOverrides4[0],
      SelectorListProps = _getOverrides4[1];

  var _getOverrides5 = (0, _overrides.getOverrides)(overrides.OverflowPanel, _styledComponents.StyledOverflowPanel),
      _getOverrides6 = _slicedToArray(_getOverrides5, 2),
      OverflowPanel = _getOverrides6[0],
      OverflowPanelProps = _getOverrides6[1];

  var _getOverrides7 = (0, _overrides.getOverrides)(overrides.OverflowPanelList, _styledComponents.StyledOverflowPanelList),
      _getOverrides8 = _slicedToArray(_getOverrides7, 2),
      OverflowPanelList = _getOverrides8[0],
      OverflowPanelListProps = _getOverrides8[1];

  var _React$useState = React.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      displayOverflow = _React$useState2[0],
      setDisplayOverflow = _React$useState2[1];

  var NavItemPanelRefs = React.useRef([]);

  function scrollToTop(idx) {
    NavItemPanelRefs.current[idx].scrollTo({
      top: 0,
      left: 0,
      behavior: 'smooth'
    });
  }

  function handleNavItemChange(activeKey) {
    if (displayOverflow) {
      setDisplayOverflow(false);
    }

    onChange({
      activeKey: activeKey
    });
  }

  var renderSelectors = function renderSelectors(navItems) {
    return navItems.map(function (navItem, idx) {
      var isActive = activeKey === idx && !displayOverflow;
      return /*#__PURE__*/React.createElement(_selector.Selector, {
        title: navItem.props.title,
        icon: navItem.props.icon,
        isActive: isActive,
        onChange: function onChange() {
          isActive ? scrollToTop(idx) : handleNavItemChange(idx);
        },
        overrides: navItem.props.overrides,
        key: idx
      });
    });
  };

  var OverflowSelector = function OverflowSelector() {
    return /*#__PURE__*/React.createElement(_selector.Selector, {
      title: "More",
      icon: _icon.Overflow,
      onChange: function onChange() {
        return setDisplayOverflow(true);
      },
      isActive: displayOverflow || activeKey > 4,
      overrides: {
        Title: overrides.OverflowTitle,
        Selector: overrides.OverflowSelector
      },
      key: 'more'
    });
  };

  var navItems = React.Children.toArray(children);
  return /*#__PURE__*/React.createElement(Root, RootProps, navItems.map(function (navItem, idx) {
    if (!navItem) return;
    var isActive = activeKey === idx && !displayOverflow;
    return /*#__PURE__*/React.createElement(_panel.Panel, {
      isActive: isActive,
      ref: function ref(element) {
        return NavItemPanelRefs.current.push(element);
      },
      overrides: navItem.props.overrides,
      key: idx,
      "aria-labelledby": "tabs-".concat(navItem.props.title, "-tabpanel-").concat(idx)
    }, navItem.props.children);
  }), displayOverflow && /*#__PURE__*/React.createElement(OverflowPanel, OverflowPanelProps, /*#__PURE__*/React.createElement(_mobileHeader.MobileHeader, {
    title: "More",
    expanded: true
  }), /*#__PURE__*/React.createElement(OverflowPanelList, OverflowPanelListProps, navItems.slice(MAX_SELECTORS - 1).map(function (navItem, overflowIdx) {
    var _navItem$props = navItem.props,
        Icon = _navItem$props.icon,
        title = _navItem$props.title;
    var idx = overflowIdx + MAX_SELECTORS - 1;
    return /*#__PURE__*/React.createElement(_list.ListItem, {
      artwork: function artwork(props) {
        return /*#__PURE__*/React.createElement(Icon, props);
      },
      endEnhancer: function endEnhancer() {
        return /*#__PURE__*/React.createElement(_icon.ChevronRight, null);
      },
      onClick: function onClick() {
        activeKey === idx && !displayOverflow ? scrollToTop(idx) : handleNavItemChange(idx);
      },
      key: overflowIdx
    }, /*#__PURE__*/React.createElement(_list.ListItemLabel, null, title));
  }))), /*#__PURE__*/React.createElement(SelectorList, _extends({
    role: "tablist"
  }, SelectorListProps), navItems.length > 5 ? /*#__PURE__*/React.createElement(React.Fragment, null, renderSelectors(navItems.slice(0, 4)), /*#__PURE__*/React.createElement(OverflowSelector, null)) : /*#__PURE__*/React.createElement(React.Fragment, null, renderSelectors(navItems))));
};

var _default = BottomNavigation;
exports.default = _default;