var _excluded = ["children"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/*
Copyright (c) Uber Technologies, Inc.
This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { getOverrides } from '../helpers/overrides';
import { Button, KIND, SHAPE, SIZE } from '../button';
import { Input as DefaultInput } from '../input';
import { Plus, CheckIndeterminate } from '../icon';
import { StyledRoot } from './styled-components';
import { useStyletron } from '../styles';

var DefaultButton = function DefaultButton(_ref) {
  var children = _ref.children,
      restProps = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement(Button, _extends({
    shape: SHAPE.circle,
    kind: KIND.secondary,
    size: SIZE.compact
  }, restProps), children);
};

export function Stepper(_ref2) {
  var value = _ref2.value,
      _ref2$disabled = _ref2.disabled,
      disabled = _ref2$disabled === void 0 ? false : _ref2$disabled,
      _ref2$overrides = _ref2.overrides,
      overrides = _ref2$overrides === void 0 ? {} : _ref2$overrides,
      setValue = _ref2.setValue,
      _ref2$minValue = _ref2.minValue,
      minValue = _ref2$minValue === void 0 ? 0 : _ref2$minValue,
      maxValue = _ref2.maxValue;

  var _getOverrides = getOverrides(overrides.Root, StyledRoot),
      _getOverrides2 = _slicedToArray(_getOverrides, 2),
      Root = _getOverrides2[0],
      rootProps = _getOverrides2[1];

  var _getOverrides3 = getOverrides(overrides.Input, DefaultInput),
      _getOverrides4 = _slicedToArray(_getOverrides3, 2),
      Input = _getOverrides4[0],
      inputProps = _getOverrides4[1];

  var _getOverrides5 = getOverrides(overrides.DecrementButton, DefaultButton),
      _getOverrides6 = _slicedToArray(_getOverrides5, 2),
      DecrementButton = _getOverrides6[0],
      decrementButtonProps = _getOverrides6[1];

  var _getOverrides7 = getOverrides(overrides.DecrementButtonIcon, CheckIndeterminate),
      _getOverrides8 = _slicedToArray(_getOverrides7, 2),
      DecrementButtonIcon = _getOverrides8[0],
      decrementButtonIconProps = _getOverrides8[1];

  var _getOverrides9 = getOverrides(overrides.DecrementButton, DefaultButton),
      _getOverrides10 = _slicedToArray(_getOverrides9, 2),
      IncrementButton = _getOverrides10[0],
      incrementButtonProps = _getOverrides10[1];

  var _getOverrides11 = getOverrides(overrides.DecrementButtonIcon, Plus),
      _getOverrides12 = _slicedToArray(_getOverrides11, 2),
      IncrementButtonIcon = _getOverrides12[0],
      incrementButtonIconProps = _getOverrides12[1];

  var handleInputChange = function handleInputChange(e) {
    var newValue = Number(e.target.value);

    if (!isNaN(newValue) && (!maxValue || newValue <= maxValue) && newValue >= minValue) {
      setValue(newValue);
    }
  };

  var _useStyletron = useStyletron(),
      _useStyletron2 = _slicedToArray(_useStyletron, 2),
      theme = _useStyletron2[1];

  return /*#__PURE__*/React.createElement(Root, rootProps, /*#__PURE__*/React.createElement(DecrementButton, _extends({
    onClick: function onClick() {
      return setValue(value - 1);
    },
    disabled: disabled || value <= minValue,
    "aria-label": "decrement value"
  }, decrementButtonProps), /*#__PURE__*/React.createElement(DecrementButtonIcon, decrementButtonIconProps)), /*#__PURE__*/React.createElement(Input, _extends({
    value: value,
    onChange: handleInputChange,
    disabled: disabled,
    "aria-label": "value",
    overrides: {
      Root: {
        style: {
          maxWidth: '36px',
          height: '36px',
          borderLeftStyle: 'none',
          borderRightStyle: 'none',
          borderTopStyle: 'none',
          borderBottomStyle: 'none'
        }
      },
      Input: {
        style: _objectSpread({
          paddingTop: 0,
          paddingBottom: 0,
          paddingLeft: 0,
          paddingRight: 0,
          textAlign: 'center',
          backgroundColor: theme.colors.backgroundPrimary
        }, theme.typography.LabelLarge)
      }
    }
  }, inputProps)), /*#__PURE__*/React.createElement(IncrementButton, _extends({
    onClick: function onClick() {
      return setValue(value + 1);
    },
    disabled: disabled || value >= maxValue,
    "aria-label": "increment value"
  }, incrementButtonProps), /*#__PURE__*/React.createElement(IncrementButtonIcon, incrementButtonIconProps)));
}
export default Stepper;