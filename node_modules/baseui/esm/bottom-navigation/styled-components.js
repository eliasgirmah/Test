function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import { styled } from '../styles';
var SELECTOR_LIST_HEIGHT = '64px';
export var StyledRoot = styled('div', {
  height: '100%',
  width: '100%',
  display: 'flex',
  flexDirection: 'column'
});
StyledRoot.displayName = "StyledRoot";
StyledRoot.displayName = 'StyledRoot';
export var StyledSelectorList = styled('div', function (_ref) {
  var $theme = _ref.$theme;
  return {
    container: 'nav-item-list / inline-size',
    boxSizing: 'border-box',
    display: 'grid',
    gridAutoFlow: 'column',
    gridAutoColumns: '1fr',
    gap: $theme.sizing.scale300,
    width: '100%',
    height: SELECTOR_LIST_HEIGHT,
    paddingTop: $theme.sizing.scale500,
    paddingBottom: $theme.sizing.scale500,
    paddingLeft: $theme.sizing.scale300,
    paddingRight: $theme.sizing.scale300,
    borderTop: "".concat($theme.sizing.scale0, " solid ").concat($theme.colors.borderOpaque),
    backgroundColor: $theme.colors.backgroundPrimary
  };
});
StyledSelectorList.displayName = "StyledSelectorList";
StyledSelectorList.displayName = 'StyledSelectorList';
export var StyledOverflowPanel = styled('div', {
  height: "calc(100% - ".concat(SELECTOR_LIST_HEIGHT, ")"),
  overflow: 'auto'
});
StyledOverflowPanel.displayName = "StyledOverflowPanel";
StyledOverflowPanel.displayName = 'StyledOverflowPanel';
export var StyledOverflowPanelList = styled('ul', {
  paddingLeft: 0,
  paddingRight: 0
});
StyledOverflowPanelList.displayName = "StyledOverflowPanelList";
StyledOverflowPanelList.displayName = 'StyledOverflowPanelList';
export var StyledTitle = styled('div', function (_ref2) {
  var $theme = _ref2.$theme,
      $isActive = _ref2.$isActive;
  return _objectSpread(_objectSpread({}, $theme.typography.LabelXSmall), {}, {
    color: $isActive ? $theme.colors.contentPrimary : $theme.colors.contentTertiary
  });
});
StyledTitle.displayName = "StyledTitle";
StyledTitle.displayName = 'StyledTitle';
export var StyledSelector = styled('button', function (_ref3) {
  var $theme = _ref3.$theme;
  return {
    '@container nav-item-list (min-width: 600px)': {
      flexDirection: 'row',
      gap: $theme.sizing.scale500
    },
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    flexDirection: 'column',
    gap: $theme.sizing.scale0,
    // button style reset
    borderRadius: 0,
    textAlign: 'inherit',
    background: 'none',
    boxShadow: 'none',
    padding: 0,
    cursor: 'pointer',
    border: 'none',
    color: 'inherit',
    font: 'inherit'
  };
});
StyledSelector.displayName = "StyledSelector";
StyledSelector.displayName = 'StyledSelector';
export var StyledPanel = styled('div', {
  height: "calc(100% - ".concat(SELECTOR_LIST_HEIGHT, ")"),
  overflow: 'auto'
});
StyledPanel.displayName = "StyledPanel";
StyledPanel.displayName = 'StyledPanel';