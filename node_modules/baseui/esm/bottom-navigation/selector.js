function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { StyledTitle, StyledSelector } from './styled-components';
import { useStyletron } from '../styles/index';
import { getOverrides } from '../helpers/overrides';
export var Selector = function Selector(_ref) {
  var title = _ref.title,
      icon = _ref.icon,
      isActive = _ref.isActive,
      onChange = _ref.onChange,
      _ref$overrides = _ref.overrides,
      overrides = _ref$overrides === void 0 ? {} : _ref$overrides;

  var _getOverrides = getOverrides(overrides.Title, StyledTitle),
      _getOverrides2 = _slicedToArray(_getOverrides, 2),
      Title = _getOverrides2[0],
      TitleProps = _getOverrides2[1];

  var _getOverrides3 = getOverrides(overrides.Selector, StyledSelector),
      _getOverrides4 = _slicedToArray(_getOverrides3, 2),
      Selector = _getOverrides4[0],
      SelectorProps = _getOverrides4[1];

  var _useStyletron = useStyletron(),
      _useStyletron2 = _slicedToArray(_useStyletron, 2),
      theme = _useStyletron2[1];

  var Icon = icon;
  return /*#__PURE__*/React.createElement(Selector, _extends({
    onClick: onChange,
    role: "tab",
    "aria-selected": isActive
  }, SelectorProps), /*#__PURE__*/React.createElement(Icon, {
    size: 20,
    color: isActive ? theme.colors.contentPrimary : theme.colors.contentTertiary
  }), /*#__PURE__*/React.createElement(Title, _extends({
    $isActive: isActive
  }, TitleProps), title));
};