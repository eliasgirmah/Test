function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { getOverrides } from '../helpers/overrides';
import { StyledRoot, StyledDot } from './styled-components';
import { SIZE, KIND } from './constants';
var MAX_DOTS = 5;

var PageControl = function PageControl(_ref) {
  var currentPage = _ref.currentPage,
      numPages = _ref.numPages,
      onPageChange = _ref.onPageChange,
      _ref$kind = _ref.kind,
      kind = _ref$kind === void 0 ? KIND.default : _ref$kind,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      ariaLabel = _ref['aria-label'],
      _ref$overrides = _ref.overrides,
      overrides = _ref$overrides === void 0 ? {} : _ref$overrides;

  var _getOverrides = getOverrides(overrides.Root, StyledRoot),
      _getOverrides2 = _slicedToArray(_getOverrides, 2),
      Root = _getOverrides2[0],
      RootProps = _getOverrides2[1];

  var _getOverrides3 = getOverrides(overrides.Dot, StyledDot),
      _getOverrides4 = _slicedToArray(_getOverrides3, 2),
      Dot = _getOverrides4[0],
      DotProps = _getOverrides4[1];

  var isOverflow = numPages > MAX_DOTS;

  function isActive(page) {
    return page === currentPage;
  }

  function isVisible(page) {
    if (!isOverflow) return true; // if current page is one of first three pages, first five page dots are visible

    if (currentPage <= 3) {
      return page <= 5;
    } // if current page is one of last three pages, last five page dots are visible


    if (numPages - currentPage < 3) {
      return page > numPages - 5;
    } // otherwise, page must be within 2 of the current page for dot to be visible


    return page >= currentPage - 2 && page <= currentPage + 2;
  }

  function getSize(page) {
    if (!isOverflow) return SIZE.large;

    if (currentPage <= 3) {
      if (page <= 3) {
        return SIZE.large;
      }

      if (page === 4) {
        return SIZE.medium;
      }

      return SIZE.small;
    }

    if (numPages - currentPage < 3) {
      if (page > numPages - 3) {
        return SIZE.large;
      }

      if (page === numPages - 3) {
        return SIZE.medium;
      }

      return SIZE.small;
    }

    if (page >= currentPage - 1 && page <= currentPage + 1) {
      return SIZE.large;
    }

    if (page === currentPage - 2 || page === currentPage + 2) {
      return SIZE.medium;
    }

    return SIZE.small;
  }

  var name = React.useId();
  return /*#__PURE__*/React.createElement(Root, _extends({
    $kind: kind,
    role: "radiogroup",
    "aria-label": ariaLabel || 'page control'
  }, RootProps), Array.from({
    length: numPages
  }, function (_, i) {
    var page = i + 1;
    return /*#__PURE__*/React.createElement(Dot, _extends({
      $active: isActive(page),
      $kind: kind,
      $disabled: disabled,
      $isVisible: isVisible(page),
      $size: getSize(page),
      checked: isActive(page),
      key: page,
      "aria-label": "page ".concat(page),
      name: name,
      onChange: function onChange() {
        return onPageChange({
          nextPage: page
        });
      },
      tabIndex: isActive(page) ? 0 : -1,
      type: "radio"
    }, DotProps));
  }));
};

export default PageControl;