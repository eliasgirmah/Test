function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) Uber Technologies, Inc.
This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { getOverrides } from '../helpers/overrides';
import { Button, KIND, SHAPE, SIZE } from '../button';
import { Input as DefaultInput } from '../input';
import { Plus, CheckIndeterminate } from '../icon';
import { StyledRoot } from './styled-components';
import { useStyletron } from '../styles';

const DefaultButton = ({
  children,
  ...restProps
}) => {
  return /*#__PURE__*/React.createElement(Button, _extends({
    shape: SHAPE.circle,
    kind: KIND.secondary,
    size: SIZE.compact
  }, restProps), children);
};

export function Stepper({
  value,
  disabled = false,
  overrides = {},
  setValue,
  minValue = 0,
  maxValue
}) {
  const [Root, rootProps] = getOverrides(overrides.Root, StyledRoot);
  const [Input, inputProps] = getOverrides(overrides.Input, DefaultInput);
  const [DecrementButton, decrementButtonProps] = getOverrides(overrides.DecrementButton, DefaultButton);
  const [DecrementButtonIcon, decrementButtonIconProps] = getOverrides(overrides.DecrementButtonIcon, CheckIndeterminate);
  const [IncrementButton, incrementButtonProps] = getOverrides(overrides.DecrementButton, DefaultButton);
  const [IncrementButtonIcon, incrementButtonIconProps] = getOverrides(overrides.DecrementButtonIcon, Plus);

  const handleInputChange = e => {
    const newValue = Number(e.target.value);

    if (!isNaN(newValue) && (!maxValue || newValue <= maxValue) && newValue >= minValue) {
      setValue(newValue);
    }
  };

  const [, theme] = useStyletron();
  return /*#__PURE__*/React.createElement(Root, rootProps, /*#__PURE__*/React.createElement(DecrementButton, _extends({
    onClick: () => setValue(value - 1),
    disabled: disabled || value <= minValue,
    "aria-label": "decrement value"
  }, decrementButtonProps), /*#__PURE__*/React.createElement(DecrementButtonIcon, decrementButtonIconProps)), /*#__PURE__*/React.createElement(Input, _extends({
    value: value,
    onChange: handleInputChange,
    disabled: disabled,
    "aria-label": "value",
    overrides: {
      Root: {
        style: {
          maxWidth: '36px',
          height: '36px',
          borderLeftStyle: 'none',
          borderRightStyle: 'none',
          borderTopStyle: 'none',
          borderBottomStyle: 'none'
        }
      },
      Input: {
        style: {
          paddingTop: 0,
          paddingBottom: 0,
          paddingLeft: 0,
          paddingRight: 0,
          textAlign: 'center',
          backgroundColor: theme.colors.backgroundPrimary,
          ...theme.typography.LabelLarge
        }
      }
    }
  }, inputProps)), /*#__PURE__*/React.createElement(IncrementButton, _extends({
    onClick: () => setValue(value + 1),
    disabled: disabled || value >= maxValue,
    "aria-label": "increment value"
  }, incrementButtonProps), /*#__PURE__*/React.createElement(IncrementButtonIcon, incrementButtonIconProps)));
}
export default Stepper;