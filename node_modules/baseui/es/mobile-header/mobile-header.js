function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) Uber Technologies, Inc.
This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { getOverrides } from '../helpers/overrides';
import { Button, KIND, SHAPE } from '../button';
import { StyledRoot, StyledNavContainer, StyledTitle, StyledActionButtonsContainer } from './styled-components';
import { TYPE } from './constants';
import { useStyletron } from '../styles/index';

const renderButtonContent = content => {
  if (typeof content === 'string') {
    return content;
  }

  const Icon = content;
  return /*#__PURE__*/React.createElement(Icon, {
    size: 32
  });
};

const DefaultHeaderButton = ({
  children,
  type,
  ...restProps
}) => {
  const [, theme] = useStyletron();
  const isFloating = type === TYPE.floating;
  const hasTextContent = typeof children === 'string';
  const shouldHaveTrailingMargin = isFloating || !hasTextContent;
  const trailingMargin = theme.direction === 'rtl' ? {
    marginLeft: theme.sizing.scale300
  } : {
    marginRight: theme.sizing.scale300
  };
  const style = { ...(!hasTextContent ? {
      height: '48px',
      width: '48px',
      paddingTop: 0,
      paddingBottom: 0,
      paddingLeft: 0,
      paddingRight: 0
    } : {}),
    ...(shouldHaveTrailingMargin ? trailingMargin : {}),
    ...(isFloating ? {
      backgroundColor: theme.colors.backgroundPrimary
    } : {})
  };
  return /*#__PURE__*/React.createElement(Button, _extends({
    kind: KIND.tertiary,
    shape: SHAPE.pill,
    overrides: {
      BaseButton: {
        style
      }
    }
  }, restProps), children);
};

export function MobileHeader({
  overrides = {},
  title,
  navButton,
  actionButtons = [],
  type = TYPE.fixed,
  expanded = false
}) {
  const [Root, rootProps] = getOverrides(overrides.Root, StyledRoot);
  const [Title, titleProps] = getOverrides(overrides.Title, StyledTitle);
  const [NavContainer, navContainerProps] = getOverrides(overrides.NavContainer, StyledNavContainer);
  const [HeaderButton, iconButtonProps] = getOverrides(overrides.HeaderButton, DefaultHeaderButton);
  const [ActionButtonsContainer, actionButtonsContainerProps] = getOverrides(overrides.ActionButtonsContainer, StyledActionButtonsContainer);

  if (actionButtons.length > 2 && process.env.NODE_ENV !== "production") {
    console.warn(`MobileHeader can only render two additional buttons. Received ${actionButtons.length}`);
  }

  return /*#__PURE__*/React.createElement(Root, _extends({}, rootProps, {
    $type: type,
    $expanded: expanded
  }), /*#__PURE__*/React.createElement(NavContainer, _extends({
    $type: type,
    $hasTextContent: navButton && !Boolean(navButton.renderIcon)
  }, navContainerProps), navButton && /*#__PURE__*/React.createElement(HeaderButton, _extends({
    onClick: navButton.onClick,
    type: type,
    "aria-label": navButton.label
  }, iconButtonProps), renderButtonContent(navButton.renderIcon || navButton.label))), type === TYPE.fixed && /*#__PURE__*/React.createElement(Title, _extends({
    $type: type,
    $expanded: expanded
  }, titleProps), title), actionButtons.length > 0 && /*#__PURE__*/React.createElement(ActionButtonsContainer, actionButtonsContainerProps, actionButtons.map((button, idx) => {
    const {
      renderIcon,
      onClick,
      label
    } = button;
    return /*#__PURE__*/React.createElement(HeaderButton, _extends({
      onClick: onClick,
      "aria-label": label,
      type: type
    }, iconButtonProps, {
      key: idx
    }), renderButtonContent(renderIcon || label));
  })));
}
export default MobileHeader;