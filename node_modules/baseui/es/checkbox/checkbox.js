function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { getOverride, getOverrideProps } from '../helpers/overrides';
import { Checkmark as StyledCheckmark, Input as StyledInput, Label as StyledLabel, Root as StyledRoot, Toggle as StyledToggle, ToggleTrack as StyledToggleTrack } from './styled-components';
import { STYLE_TYPE } from './constants';
import { isFocusVisible } from '../utils/focusVisible';

// @ts-ignore
const stopPropagation = e => e.stopPropagation();

class StatelessCheckbox extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "inputRef", this.props.inputRef || /*#__PURE__*/React.createRef());

    _defineProperty(this, "state", {
      isFocused: this.props.autoFocus || false,
      isFocusVisible: false,
      isHovered: false,
      isActive: false
    });

    _defineProperty(this, "onMouseEnter", e => {
      this.setState({
        isHovered: true
      }); // @ts-ignore

      this.props.onMouseEnter(e);
    });

    _defineProperty(this, "onMouseLeave", e => {
      this.setState({
        isHovered: false,
        isActive: false
      }); // @ts-ignore

      this.props.onMouseLeave(e);
    });

    _defineProperty(this, "onMouseDown", e => {
      this.setState({
        isActive: true
      }); // @ts-ignore

      this.props.onMouseDown(e);
    });

    _defineProperty(this, "onMouseUp", e => {
      this.setState({
        isActive: false
      }); // @ts-ignore

      this.props.onMouseUp(e);
    });

    _defineProperty(this, "onFocus", e => {
      this.setState({
        isFocused: true
      }); // @ts-ignore

      this.props.onFocus(e);

      if (isFocusVisible(e)) {
        this.setState({
          isFocusVisible: true
        });
      }
    });

    _defineProperty(this, "onBlur", e => {
      this.setState({
        isFocused: false
      }); // @ts-ignore

      this.props.onBlur(e);

      if (this.state.isFocusVisible !== false) {
        this.setState({
          isFocusVisible: false
        });
      }
    });
  }

  componentDidMount() {
    const {
      autoFocus,
      isIndeterminate
    } = this.props; // @ts-ignore

    if (autoFocus && this.inputRef.current) {
      // @ts-ignore
      this.inputRef.current.focus();
    }

    if (this.inputRef.current) {
      this.inputRef.current.indeterminate = Boolean(isIndeterminate);
    }
  }

  componentDidUpdate(prevProps) {
    const {
      isIndeterminate
    } = this.props;

    if (this.inputRef.current && isIndeterminate !== prevProps.isIndeterminate) {
      this.inputRef.current.indeterminate = Boolean(isIndeterminate);
    }
  }

  render() {
    const {
      overrides = {},
      onChange,
      labelPlacement = this.props.checkmarkType === STYLE_TYPE.toggle ? 'left' : 'right',
      isIndeterminate,
      error,
      disabled,
      value,
      id,
      name,
      checked,
      children,
      required,
      title
    } = this.props;
    const {
      Root: RootOverride,
      Checkmark: CheckmarkOverride,
      Label: LabelOverride,
      Input: InputOverride,
      Toggle: ToggleOverride,
      ToggleTrack: ToggleTrackOverride
    } = overrides;
    const Root = getOverride(RootOverride) || StyledRoot;
    const Checkmark = getOverride(CheckmarkOverride) || StyledCheckmark;
    const Label = getOverride(LabelOverride) || StyledLabel;
    const Input = getOverride(InputOverride) || StyledInput;
    const Toggle = getOverride(ToggleOverride) || StyledToggle;
    const ToggleTrack = getOverride(ToggleTrackOverride) || StyledToggleTrack;
    const inputEvents = {
      onChange,
      onFocus: this.onFocus,
      onBlur: this.onBlur
    };
    const mouseEvents = {
      onMouseEnter: this.onMouseEnter,
      onMouseLeave: this.onMouseLeave,
      onMouseDown: this.onMouseDown,
      onMouseUp: this.onMouseUp
    };
    const sharedProps = {
      $isFocused: this.state.isFocused,
      $isFocusVisible: this.state.isFocusVisible,
      $isHovered: this.state.isHovered,
      $isActive: this.state.isActive,
      $error: error,
      $checked: checked,
      $isIndeterminate: isIndeterminate,
      $required: required,
      $disabled: disabled,
      $value: value
    };
    const labelComp = children && /*#__PURE__*/React.createElement(Label, _extends({
      $labelPlacement: labelPlacement
    }, sharedProps, getOverrideProps(LabelOverride)), this.props.containsInteractiveElement ?
    /*#__PURE__*/
    // Prevents the event from bubbling up to the label and moving focus to the radio button
    // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
    React.createElement("div", {
      onClick: e => e.preventDefault()
    }, children) : children);
    return /*#__PURE__*/React.createElement(Root, _extends({
      "data-baseweb": "checkbox",
      title: title || null,
      $labelPlacement: labelPlacement
    }, sharedProps, mouseEvents, getOverrideProps(RootOverride)), (labelPlacement === 'top' || labelPlacement === 'left') && labelComp, this.props.checkmarkType === STYLE_TYPE.toggle ? /*#__PURE__*/React.createElement(ToggleTrack, _extends({}, sharedProps, getOverrideProps(ToggleTrackOverride)), /*#__PURE__*/React.createElement(Toggle, _extends({}, sharedProps, getOverrideProps(ToggleOverride)))) : /*#__PURE__*/React.createElement(Checkmark, _extends({}, sharedProps, getOverrideProps(CheckmarkOverride))), /*#__PURE__*/React.createElement(Input, _extends({
      value: value,
      id: id,
      name: name,
      checked: checked,
      required: required,
      "aria-label": this.props['aria-label'] || this.props.ariaLabel,
      "aria-describedby": this.props['aria-describedby'],
      "aria-errormessage": this.props['aria-errormessage'],
      "aria-invalid": error || null,
      "aria-required": required || null,
      disabled: disabled,
      type: "checkbox",
      ref: this.inputRef // Prevent a second click event from firing when label is clicked.
      // See https://github.com/uber/baseweb/issues/3847
      ,
      onClick: stopPropagation
    }, sharedProps, inputEvents, getOverrideProps(InputOverride))), (labelPlacement === 'bottom' || labelPlacement === 'right') && labelComp);
  }

}

_defineProperty(StatelessCheckbox, "defaultProps", {
  overrides: {},
  // todo(flow->ts): missing field in flow types
  checked: false,
  containsInteractiveElement: false,
  disabled: false,
  autoFocus: false,
  isIndeterminate: false,
  error: false,
  checkmarkType: STYLE_TYPE.default,
  onChange: () => {},
  onMouseEnter: () => {},
  onMouseLeave: () => {},
  onMouseDown: () => {},
  onMouseUp: () => {},
  onFocus: () => {},
  onBlur: () => {}
});

export default StatelessCheckbox;