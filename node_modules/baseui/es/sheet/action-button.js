function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { Button, KIND, SHAPE, SIZE } from '../button';
export function ActionButton({
  children,
  size,
  ...restProps
}) {
  const iconButtonStyle = {
    paddingTop: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    paddingRight: 0
  }; // compact buttons need a pseudo-element to acheive a 48px tap target

  const compactButtonStyle = {
    position: 'relative',
    ':after': {
      content: '""',
      position: 'absolute',
      height: '48px',
      width: '48px'
    }
  };
  return /*#__PURE__*/React.createElement(Button, _extends({
    kind: KIND.tertiary,
    shape: SHAPE.square,
    size: size,
    overrides: {
      BaseButton: {
        style: { ...(size === SIZE.compact ? compactButtonStyle : {}),
          ...(typeof children !== 'string' ? iconButtonStyle : {})
        }
      }
    }
  }, restProps), children);
}