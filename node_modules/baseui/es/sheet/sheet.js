function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { getOverrides } from '../helpers/overrides';
import { ProgressBar, SIZE } from '../progress-bar';
import { SIZE as BTN_SIZE } from '../button';
import { SIZE as DIVIDER_SIZE } from '../divider';
import { ActionButton as DefaultActionButton } from './action-button';
import { StyledBottomContainer, StyledBody, StyledDescription, StyledDivider, StyledEmptyDiv, StyledGrabber, StyledHeader, StyledHeaderGrid, StyledHeaderTextContainer, StyledRoot, StyledTitle, StyledTopContainer } from './styled-components';

function renderBodyContent(content) {
  return typeof content === 'function' ? content() : content;
}

function renderActionButtonContent(content, buttonSize) {
  if (typeof content === 'string') {
    return content;
  }

  const Icon = content;
  return /*#__PURE__*/React.createElement(Icon, {
    size: buttonSize === BTN_SIZE.compact ? 22 : 26
  });
}

export const Sheet = ({
  children,
  content,
  description,
  draggable = false,
  leadingAction,
  overrides = {},
  progressBar,
  title,
  topPosition,
  trailingAction
}) => {
  const [Root, rootProps] = getOverrides(overrides.Root, StyledRoot);
  const [TopContainer, topContainerProps] = getOverrides(overrides.TopContainer, StyledTopContainer);
  const [BottomContainer, bottomContainerProps] = getOverrides(overrides.BottomContainer, StyledBottomContainer);
  const [Header, headerProps] = getOverrides(overrides.Header, StyledHeader);
  const [Grabber, grabberProps] = getOverrides(overrides.Grabber, StyledGrabber);
  const [HeaderGrid, headerGridProps] = getOverrides(overrides.HeaderGrid, StyledHeaderGrid);
  const [ActionButton, actionButtonProps] = getOverrides(overrides.ActionButton, DefaultActionButton);
  const [EmptyDiv, emptyDivProps] = getOverrides(overrides.EmptyDiv, StyledEmptyDiv);
  const [HeaderTextContainer, HeaderTextContainerProps] = getOverrides(overrides.HeaderTextContainer, StyledHeaderTextContainer);
  const [Title, titleProps] = getOverrides(overrides.Title, StyledTitle);
  const [Description, descriptionProps] = getOverrides(overrides.Description, StyledDescription);
  const [Divider, dividerProps] = getOverrides(overrides.Divider, StyledDivider);
  const [Body, bodyProps] = getOverrides(overrides.Body, StyledBody);
  const hasTitle = Boolean(title);
  const hasDescription = Boolean(description);
  const hasLeadingAction = Boolean(leadingAction);
  const hasTrailingAction = Boolean(trailingAction);
  const buttonSize = hasTitle ? BTN_SIZE.default : BTN_SIZE.compact;
  const shouldDisplayHeader = draggable || hasTitle || hasDescription || hasLeadingAction || hasTrailingAction;
  return /*#__PURE__*/React.createElement(Root, _extends({
    $draggable: draggable
  }, rootProps), /*#__PURE__*/React.createElement(TopContainer, _extends({
    $draggable: draggable,
    $topPosition: topPosition
  }, topContainerProps), children), /*#__PURE__*/React.createElement(BottomContainer, _extends({
    $draggable: draggable,
    $topPosition: topPosition
  }, bottomContainerProps), shouldDisplayHeader && /*#__PURE__*/React.createElement(Header, headerProps, draggable && /*#__PURE__*/React.createElement(Grabber, grabberProps), /*#__PURE__*/React.createElement(HeaderGrid, _extends({
    $hasLeadingAction: hasLeadingAction,
    $hasTrailingAction: hasTrailingAction
  }, headerGridProps), leadingAction && /*#__PURE__*/React.createElement(ActionButton, _extends({
    onClick: leadingAction.onClick,
    "aria-label": leadingAction.label,
    size: buttonSize
  }, actionButtonProps), renderActionButtonContent(leadingAction.renderIcon || leadingAction.label, buttonSize)), trailingAction && !leadingAction && /*#__PURE__*/React.createElement(EmptyDiv, emptyDivProps), (hasTitle || hasDescription) && /*#__PURE__*/React.createElement(HeaderTextContainer, _extends({
    $draggable: draggable,
    $hasTitle: hasTitle,
    $hasDescription: hasDescription
  }, HeaderTextContainerProps), title && /*#__PURE__*/React.createElement(Title, titleProps, title), description && /*#__PURE__*/React.createElement(Description, descriptionProps, description)), trailingAction && /*#__PURE__*/React.createElement(ActionButton, _extends({
    onClick: trailingAction.onClick,
    "aria-label": trailingAction.label,
    size: buttonSize
  }, actionButtonProps), renderActionButtonContent(trailingAction.renderIcon || trailingAction.label, buttonSize)), !trailingAction && leadingAction && /*#__PURE__*/React.createElement(EmptyDiv, emptyDivProps)), progressBar ? /*#__PURE__*/React.createElement(ProgressBar, _extends({
    size: SIZE.small,
    overrides: {
      BarContainer: {
        style: {
          marginTop: 0,
          marginBottom: 0
        }
      }
    }
  }, progressBar)) : /*#__PURE__*/React.createElement(Divider, _extends({
    $size: DIVIDER_SIZE.section
  }, dividerProps))), /*#__PURE__*/React.createElement(Body, bodyProps, renderBodyContent(content))));
};
export default Sheet;