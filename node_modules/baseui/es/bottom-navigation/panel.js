function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { StyledPanel } from './styled-components';
import { getOverrides } from '../helpers/overrides';
export const Panel = /*#__PURE__*/React.forwardRef(({
  isActive,
  overrides = {},
  children
}, ref) => {
  const [Panel, PanelProps] = getOverrides(overrides.Panel, StyledPanel);
  return /*#__PURE__*/React.createElement(Panel, _extends({
    ref: ref,
    tabIndex: isActive ? '0' : '-1',
    role: "tabpanel",
    hidden: !isActive
  }, PanelProps), children);
});
Panel.displayName = 'Panel';