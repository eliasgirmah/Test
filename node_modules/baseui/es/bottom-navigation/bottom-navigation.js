function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { Selector } from './selector';
import { Panel } from './panel';
import { StyledRoot, StyledSelectorList, StyledOverflowPanel, StyledOverflowPanelList } from './styled-components';
import { getOverrides } from '../helpers/overrides';
import { ListItem, ListItemLabel } from '../list';
import { MobileHeader } from '../mobile-header';
import { Overflow, ChevronRight } from '../icon';
const MAX_SELECTORS = 5;

const BottomNavigation = ({
  activeKey = 0,
  onChange,
  children,
  overrides = {}
}) => {
  const [Root, RootProps] = getOverrides(overrides.Root, StyledRoot);
  const [SelectorList, SelectorListProps] = getOverrides(overrides.SelectorList, StyledSelectorList);
  const [OverflowPanel, OverflowPanelProps] = getOverrides(overrides.OverflowPanel, StyledOverflowPanel);
  const [OverflowPanelList, OverflowPanelListProps] = getOverrides(overrides.OverflowPanelList, StyledOverflowPanelList);
  const [displayOverflow, setDisplayOverflow] = React.useState(false);
  const NavItemPanelRefs = React.useRef([]);

  function scrollToTop(idx) {
    NavItemPanelRefs.current[idx].scrollTo({
      top: 0,
      left: 0,
      behavior: 'smooth'
    });
  }

  function handleNavItemChange(activeKey) {
    if (displayOverflow) {
      setDisplayOverflow(false);
    }

    onChange({
      activeKey
    });
  }

  const renderSelectors = navItems => navItems.map((navItem, idx) => {
    const isActive = activeKey === idx && !displayOverflow;
    return /*#__PURE__*/React.createElement(Selector, {
      title: navItem.props.title,
      icon: navItem.props.icon,
      isActive: isActive,
      onChange: () => {
        isActive ? scrollToTop(idx) : handleNavItemChange(idx);
      },
      overrides: navItem.props.overrides,
      key: idx
    });
  });

  const OverflowSelector = () => /*#__PURE__*/React.createElement(Selector, {
    title: "More",
    icon: Overflow,
    onChange: () => setDisplayOverflow(true),
    isActive: displayOverflow || activeKey > 4,
    overrides: {
      Title: overrides.OverflowTitle,
      Selector: overrides.OverflowSelector
    },
    key: 'more'
  });

  const navItems = React.Children.toArray(children);
  return /*#__PURE__*/React.createElement(Root, RootProps, navItems.map((navItem, idx) => {
    if (!navItem) return;
    const isActive = activeKey === idx && !displayOverflow;
    return /*#__PURE__*/React.createElement(Panel, {
      isActive: isActive,
      ref: element => NavItemPanelRefs.current.push(element),
      overrides: navItem.props.overrides,
      key: idx,
      "aria-labelledby": `tabs-${navItem.props.title}-tabpanel-${idx}`
    }, navItem.props.children);
  }), displayOverflow && /*#__PURE__*/React.createElement(OverflowPanel, OverflowPanelProps, /*#__PURE__*/React.createElement(MobileHeader, {
    title: "More",
    expanded: true
  }), /*#__PURE__*/React.createElement(OverflowPanelList, OverflowPanelListProps, navItems.slice(MAX_SELECTORS - 1).map((navItem, overflowIdx) => {
    const {
      icon: Icon,
      title
    } = navItem.props;
    const idx = overflowIdx + MAX_SELECTORS - 1;
    return /*#__PURE__*/React.createElement(ListItem, {
      artwork: props => /*#__PURE__*/React.createElement(Icon, props),
      endEnhancer: () => /*#__PURE__*/React.createElement(ChevronRight, null),
      onClick: () => {
        activeKey === idx && !displayOverflow ? scrollToTop(idx) : handleNavItemChange(idx);
      },
      key: overflowIdx
    }, /*#__PURE__*/React.createElement(ListItemLabel, null, title));
  }))), /*#__PURE__*/React.createElement(SelectorList, _extends({
    role: "tablist"
  }, SelectorListProps), navItems.length > 5 ? /*#__PURE__*/React.createElement(React.Fragment, null, renderSelectors(navItems.slice(0, 4)), /*#__PURE__*/React.createElement(OverflowSelector, null)) : /*#__PURE__*/React.createElement(React.Fragment, null, renderSelectors(navItems))));
};

export default BottomNavigation;