function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { StyledTitle, StyledSelector } from './styled-components';
import { useStyletron } from '../styles/index';
import { getOverrides } from '../helpers/overrides';
export const Selector = ({
  title,
  icon,
  isActive,
  onChange,
  overrides = {}
}) => {
  const [Title, TitleProps] = getOverrides(overrides.Title, StyledTitle);
  const [Selector, SelectorProps] = getOverrides(overrides.Selector, StyledSelector);
  const [, theme] = useStyletron();
  const Icon = icon;
  return /*#__PURE__*/React.createElement(Selector, _extends({
    onClick: onChange,
    role: "tab",
    "aria-selected": isActive
  }, SelectorProps), /*#__PURE__*/React.createElement(Icon, {
    size: 20,
    color: isActive ? theme.colors.contentPrimary : theme.colors.contentTertiary
  }), /*#__PURE__*/React.createElement(Title, _extends({
    $isActive: isActive
  }, TitleProps), title));
};