function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) Uber Technologies, Inc.
This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { useStyletron } from '../styles';
import { getOverrides } from '../helpers/overrides';
import { LabelSmall, LabelMedium } from '../typography';
import { FLOATING_ROUTE_MARKER_ANCHOR_POSITIONS, FLOATING_ROUTE_MARKER_POINTER_TYPE_WRAPPER_SIZES, FLOATING_ROUTE_MARKER_POINTERS, PINHEAD_SIZES_SHAPES, PINHEAD_DIMENSIONS } from './constants';
import { StyledFloatingRouteMarkerRoot, StyledLabelSlot, StyledFloatingRouteMarkerPointerContainer, StyledFloatingRouteMarkerPointer } from './styled-components';

const FloatingRouteMarker = ({
  label,
  secondaryLabel,
  startEnhancer: StartEnhancer,
  endEnhancer: EndEnhancer,
  selected = false,
  anchorPosition = FLOATING_ROUTE_MARKER_ANCHOR_POSITIONS.topLeft,
  overrides = {}
}) => {
  const [css, theme] = useStyletron();
  const backgroundColor = selected ? theme.colors.backgroundInversePrimary : theme.colors.backgroundPrimary;
  const color = selected ? theme.colors.contentInversePrimary : theme.colors.contentPrimary;
  const secondaryLabelColor = selected ? theme.colors.contentInverseSecondary : theme.colors.contentSecondary;
  const [Root, rootProps] = getOverrides(overrides.Root, StyledFloatingRouteMarkerRoot);
  const [IconContainer, iconContainerProps] = getOverrides(overrides.IconContainer, StyledLabelSlot);
  const [PrimaryLabel, primaryLabelProps] = getOverrides(overrides.Label, LabelMedium);
  const [SecondaryLabel, secondaryLabelProps] = getOverrides(overrides.SecondaryLabel, LabelSmall);
  const [Pointer, pointerProps] = getOverrides(overrides.Pointer, StyledFloatingRouteMarkerPointer);
  const [PointerContainer, pointerContainerProps] = getOverrides(overrides.PointerContainer, StyledFloatingRouteMarkerPointerContainer);
  const size = PINHEAD_SIZES_SHAPES.medium;
  const {
    icon
  } = PINHEAD_DIMENSIONS[size];
  const activeElements = [label, StartEnhancer, EndEnhancer].filter(x => x);
  const gridTemplateColumns = activeElements.map(() => 'auto').join(' ');
  return /*#__PURE__*/React.createElement(Root, _extends({
    "data-baseweb": "floating-route-map-marker",
    $background: backgroundColor,
    $gridTemplateColumns: gridTemplateColumns
  }, rootProps), StartEnhancer && /*#__PURE__*/React.createElement(IconContainer, _extends({
    $color: color,
    $size: size
  }, iconContainerProps), /*#__PURE__*/React.createElement(StartEnhancer, {
    size: icon
  })), label && /*#__PURE__*/React.createElement("div", {
    className: css({
      display: 'flex',
      flexDirection: 'column'
    })
  }, /*#__PURE__*/React.createElement(PrimaryLabel, _extends({
    $color: color
  }, primaryLabelProps), label), /*#__PURE__*/React.createElement(SecondaryLabel, _extends({
    $color: secondaryLabelColor
  }, secondaryLabelProps), secondaryLabel)), EndEnhancer && /*#__PURE__*/React.createElement(IconContainer, _extends({
    $color: color,
    $size: size
  }, iconContainerProps), /*#__PURE__*/React.createElement(EndEnhancer, {
    size: icon
  })), /*#__PURE__*/React.createElement(PointerContainer, _extends({
    $position: anchorPosition,
    xmlns: "http://www.w3.org/2000/svg"
  }, FLOATING_ROUTE_MARKER_POINTER_TYPE_WRAPPER_SIZES[FLOATING_ROUTE_MARKER_POINTERS[anchorPosition].type], pointerContainerProps), /*#__PURE__*/React.createElement(Pointer, _extends({
    d: FLOATING_ROUTE_MARKER_POINTERS[anchorPosition].path,
    $background: backgroundColor
  }, pointerProps))));
};

export default FloatingRouteMarker;