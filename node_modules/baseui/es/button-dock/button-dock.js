function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { StyledRoot, StyledActionContainer, StyledActionSubContainer } from './styled-components';
import { getOverrides } from '../helpers/overrides';

const ButtonDock = props => {
  const {
    primaryAction,
    secondaryActions,
    dismissiveAction,
    topAccessory,
    overrides = {}
  } = props;
  const [Root, rootProps] = getOverrides(overrides.Root, StyledRoot);
  const [ActionContainer, actionContainerProps] = getOverrides(overrides.ActionContainer, StyledActionContainer);
  const [ActionSubContainer, actionSubContainerProps] = getOverrides(overrides.ActionSubContainer, StyledActionSubContainer);
  return /*#__PURE__*/React.createElement(Root, rootProps, topAccessory, /*#__PURE__*/React.createElement(ActionContainer, actionContainerProps, /*#__PURE__*/React.createElement(ActionSubContainer, actionSubContainerProps, secondaryActions), /*#__PURE__*/React.createElement(ActionSubContainer, _extends({
    $reverseWhenWide: true
  }, actionSubContainerProps), primaryAction, dismissiveAction)));
};

export default ButtonDock;